# R dist
# In case you need to rerun the geodesical distances in the TSP library of R,
# for this metric is not included, type "trace(dist, edit = T)" and copy paste 
# the code below.
function (x, method = "euclidean", diag = FALSE, upper = FALSE, 
    p = 2) 
{
    if (!is.na(pmatch(method, "euclidian"))) 
        method <- "euclidean"
    METHODS <- c("euclidean", "maximum", "manhattan", "canberra", 
        "binary", "minkowski")
    method <- pmatch(method, METHODS)
    if (is.na(method)) 
        stop("invalid distance method")
    if (method == -1) 
        stop("ambiguous distance method")
    x <- as.matrix(x)
    N <- nrow(x)
    attrs <- if (method == 6L) 
        list(Size = N, Labels = dimnames(x)[[1L]], Diag = diag, 
            Upper = upper, method = METHODS[method], p = p, call = match.call(), 
            class = "dist")
    else list(Size = N, Labels = dimnames(x)[[1L]], Diag = diag, 
        Upper = upper, method = METHODS[method], call = match.call(), 
        class = "dist")
    y <- .Call(C_Cdist, x, method, attrs, p)
    k <- 0
    z <- rep(0, k)
    PI <- 3.141592
    RRR <- 6378.388
    for (j in 1:(N - 1)) {
        for (i in (j + 1):N) {
            k <- k + 1
            c1.x <- x[i, 1]
            c1.y <- x[i, 2]
            c2.x <- x[j, 1]
            c2.y <- x[j, 2]
            if(c1.x >= 0)
		    	deg <- floor(c1.x)
		 	else
		    	deg <- -floor(-1*c1.x)
            min <- c1.x - deg
            latitude1 <- PI * (deg + 5 * min/3)/180
            if(c1.y >= 0)
		    	deg <- floor(c1.y)
		 	else
		    	deg <- -floor(-1*c1.y)
            min <- c1.y - deg
            longitude1 <- PI * (deg + 5 * min/3)/180
            if(c2.x >= 0)
		    	deg <- floor(c2.x)
		 	else
		    	deg <- -floor(-1*c2.x)
            min <- c2.x - deg
            latitude2 <- PI * (deg + 5 * min/3)/180
            if(c2.y >= 0)
		    	deg <- floor(c2.y)
		 	else
		    	deg <- -floor(-1*c2.y)
            min <- c2.y - deg
            longitude2 = PI * (deg + 5 * min/3)/180
            q1 = cos(longitude1 - longitude2)
            q2 = cos(latitude1 - latitude2)
            q3 = cos(latitude1 + latitude2)
            dxy = floor(RRR * acos(0.5 * ((1 + q1) * q2 - (1 - 
                q1) * q3)) + 1 + 0.5)
            y[k] <- dxy
        }
    }
    return(y)
}
