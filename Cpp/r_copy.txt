# Functions
```{r}
# Define extract number from string
numextract <- function(string){ 
  str_extract(string, "\\-*\\d+\\.*\\d*")
} 

# Updates distance matrix when triangle Inequality is not satissfied
desigualdad_triangulo <- function(cities_dist)
  for(i in 1:(n-1)){
    for(j in (i+1):n){
      distancia_minima <- cities_dist[i,j]
      set <- setdiff(1:n, c(i,j))
      for(k in set){
        distancia_indirecta <- cities_dist[i,k] + cities_dist[k,j]
        if(distancia_indirecta < distancia_minima){
          distancia_minima <- distancia_indirecta
        }
      }
      cities_dist[i,j] <- distancia_minima
      cities_dist[j,i] <- distancia_minima
    }
    return(cities_dist)
  }
TSP_plot <- function(cities_pos_df, camino_heuristica, camino_heuristica_original){
  n <- nrow(cities_pos_df)
  g <- ggplot(cities_pos_df, aes(x = V1, y = V2)) + geom_point() + theme_bw() + geom_text(aes(label=c(1:n)), hjust=0, vjust=0)
  if(all(!camino_heuristica==0)){
    m <- n
  }
  else{
   m <- min(which(camino_heuristica==0))-2 
  }
  for(i in 1:m){
     i_vec <- flatten_dbl(cities_pos_df[camino_heuristica[i],])
     j_vec <- flatten_dbl(cities_pos_df[camino_heuristica[i+1],])
     if(camino_heuristica[i] == camino_heuristica_original[i]){
        g <- g + geom_segment(x = i_vec[1], xend = j_vec[1], y = i_vec[2], yend = j_vec[2], color="black")
     }
     else{
       g <- g + geom_segment(x = i_vec[1] , xend = j_vec[1], y = i_vec[2], yend = j_vec[2], color="red") 
     }
  }
  return(g)
}

index_function <- function(i,j){
  return(which(paths[i,]==j)[1])
}
```

# Hyper parameters
```{r}
set.seed(11212)
proportion_edges <- 1/3 # Each node will only have this proportion of neighbors with respect the n neighbors
immediate_value <- 3 # When a node has this number of neighbors then it adds to the path regardless of the cost
```

# Main
```{r}
start_time <- Sys.time()
######################################## LEER ARCHIVO
name_instance <- "eil101.tsp"
name_instance <- paste0("~/Desktop/Tesis_Maestria/tesis_maestria/", name_instance)
n <- numextract(name_instance) %>% as.double()
instancia <- read_table2(name_instance, skip = 6, col_names = FALSE, n_max = n)
cities_pos <- instancia[,2:3]
######################################## GENERAR matrix ALEATORIA
# n <- 75
# immediate_value <- 3
# cities_pos <- matrix(runif(2*n), ncol = 2) # Generate coordinates of n neighbors randomly
# cities_pos <- round(1000*(cities_pos)) # Round to integers
#################################################################
cities_pos <- as.matrix(cities_pos)
colnames(cities_pos) <- c("V1", "V2")
cities_dist_original <- matrix_euclidean(cities_pos) # Generate distance matrix
cities_dist <- cities_dist_original # For last iteration, save original values
```

```{r}
# Eliminate all but the first kth nearest edges for each node.
total_neighbors <- floor(n*proportion_edges) # Number of the first kth neighbors, the rest edges will get eliminated
# Eliminate all but the first kth nearest edges for each node.
for(i in 1:n){
  kth_near <- (cities_dist_original[i,] %>% sort())[total_neighbors]
  for(j in 1:n){
      if(cities_dist_original[i,j] > kth_near){
        cities_dist[i,j] <- Inf
      }
   }
}

# It is possible that the resulting matrix is not symmetric because there is no symmetry in the fact that 
# the kth neighbor v2 for a v1 node might not be the kth neighbor v1 for v2.
cities_dist <- matrix_symmetric(cities_dist)

# We define a list that has the neighbors of each node. Because each node can have different amount of neighbors a matrix
# is not an appropriate path.
neighbors_list <- list()
for(i in 1:n){
  neighbors_list[[i]] <- which(as.logical((cities_dist[i,] < Inf)*(cities_dist[i,] > 0) %>% as.integer()))
}
# Estricturas a usar
paths <- matrix(integer((n+1)*n), nrow = n) # The Paths starting at each node. In each row we try to form a cycle.
paths[,c(1,(n+1))] <- 1:n
costs <- matrix(integer(n^2), nrow = n) # The cost of traveling from [i,j] to [i,j+1]
# Vector con numero de neighbors
degree_neighbors <- sapply(1:n, function(i){neighbors_list[[i]] %>% length()}) #Number of neighbors of each node
degree_neighbors_list <- list() # For each cycle we need to keep control of how many neighbors are left. We define a list.
for(i in 1:n){
  degree_neighbors_list[[i]] <- degree_neighbors
}
```

#Iteraciones
```{r}
# Primero generamos un cycle hamiltoniano para cada nodo.
m <- n-1 # Si se quiere ver como se ve el camino en la m-ésima iteracion se puede ajustar, sino dejar m = n-1
for(num_iter in 1:m){
  for(i in 1:n){
    city_current <- paths[i, num_iter]
    # Se calculan las ciudades vecinas que no se han visitado
    cities_neighbors_to_go <- setdiff(neighbors_list[[city_current]], paths[i, 1:num_iter])
    number_neighbors <- length(cities_neighbors_to_go)
    # Si no hay ciudades vecinas entonces se hace el calculo sobre todas las posibles ciudades
    if(number_neighbors == 0){
      cities_neighbors_to_go <- setdiff(1:n, paths[i, 1:num_iter])
    }
    # Se guardan en un vector solo los grados de los correspondientes nodos por visitar
    degree_neighbors_to_go <- degree_neighbors_list[[i]][cities_neighbors_to_go]
    # Se calcula un valor booleano que previene que nos olvidemos de un nodo. Si existe un nodo con pocos
    # vecinos hay que visitarlo inmediatamente, sino, conviene visitar el más proximo.
    immediate_neighbors <- degree_neighbors_to_go <= immediate_value
    if(all(!immediate_neighbors)){
      # En caso de que todos los nodos tengan multiples vecinos calcular el mas proximo
      city_distances <- cities_dist_original[city_current, cities_neighbors_to_go]
      dist_min <- min(city_distances)
      city_min <- cities_neighbors_to_go[which.min(city_distances)]
    }
    else{
    # En caso de que haya que visitar uno inmediatamente entonces añadirlo 
      city_min <- cities_neighbors_to_go[which.min(degree_neighbors_to_go)]
      dist_min <- cities_dist_original[city_current, city_min]
    }
    # Todos los vecinos que tengan asociado a la ciudad que se visita se les resta un grado
    if(number_neighbors!=0){
       degree_neighbors_list[[i]][cities_neighbors_to_go] <- degree_neighbors_list[[i]][cities_neighbors_to_go] - 1  
    }
    # Se actualiza el grado de la ciudad actual a 0.
    degree_neighbors_list[[i]][city_current] <- 0
    # Se actualiza la matriz de costo.
    costs[i, num_iter] <- dist_min
    paths[i, num_iter+1] <- city_min
    # Se verifica que no haya crossing
    if(num_iter>2){
      city21=city_current
      x21=cities_pos[city21,1]
      y21=cities_pos[city21,2]
      city22=city_min
      x22=cities_pos[city22,1]
      y22=cities_pos[city22,2]
      if(x22-x21 != 0){
        m2 = (y22-y21)/(x22-x21)
      }
      else{
        m2 =(y22-y21)/(x22-x21+10e-5)
      }
      b2 = y21-m2*x21
      for(k in (num_iter-2):1){ # ... las restantes aristas
      #for(k in 1:(num_iter-2)){ # ... las restantes aristas
        city11 <- paths[i,k]
        x11 <- cities_pos[city11,1]
        y11 <- cities_pos[city11,2]
        city12 <- paths[i,k+1]
        x12 <- cities_pos[city12,1]
        y12 <- cities_pos[city12,2]
        if(x12-x11 != 0){
          m1 <- (y12-y11)/(x12-x11)
        }
        else{
          m1 <- (y12-y11)/(x12-x11+10e-5)
        }
        b1 <- y11-m1*x11
        if(m1 != m2){
          x_intersect <- -(b2-b1)/(m2-m1)
          bool1 <- (x11 < x_intersect & x_intersect < x12) | (x12 < x_intersect & x_intersect < x11)
          bool2 <- (x21 < x_intersect & x_intersect < x22) | (x22 < x_intersect & x_intersect < x21)
          if(bool1 & bool2){ # condition for finding crossing
            replace_crossing <- rev(paths[i,(k+1):num_iter])
            paths[i,(k+1):num_iter] <- replace_crossing
            dist1_replace <- cities_dist_original[city11,city21]
            dist2_replace <- cities_dist_original[city12,city22]
            costs[i,k:num_iter] = c(dist1_replace, rev(costs[i,(k+1):(num_iter-1)]), dist2_replace)
            city_current <- paths[i, num_iter]
            city21=city_current
            x21=cities_pos[city21,1]
            y21=cities_pos[city21,2]
          } # end of if crossing exist
        } # end of if slopes are different
      } # end of for possible crossing
    } #end of if iter > 2
  } # end of construction of path i
} # end of iterations


# Se verifica que la ultima arista no hace crossing
num_iter <- num_iter+1
if(num_iter==n){
  for(i in 1:n){
    city_current <- paths[i, n]
    city21=city_current
    x21=cities_pos[city21,1]
    y21=cities_pos[city21,2]
    city22=i
    x22=cities_pos[city22,1]
    y22=cities_pos[city22,2]
    if(x22-x21 != 0){
      m2 = (y22-y21)/(x22-x21)
    }
    else{
      m2 =(y22-y21)/(x22-x21+10e-5)
    }
    b2 = y21-m2*x21
    for(k in (num_iter-2):1){ # ... las restantes aristas
      # Se revisan las aristas en orden inverso porque asi se sustituye el crossing mas cercano
      # el menos 2 es porque no puede haber crossing con la arista inmediata anterior
    #for(k in 1:(num_iter-2)){ # ... las restantes aristas
      city11 <- paths[i,k]
      x11 <- cities_pos[city11,1]
      y11 <- cities_pos[city11,2]
      city12 <- paths[i,k+1]
      x12 <- cities_pos[city12,1]
      y12 <- cities_pos[city12,2]
      if(x12-x11 != 0){
        m1 <- (y12-y11)/(x12-x11)
      }
      else{
        m1 <- (y12-y11)/(x12-x11+10e-5)
      }
      b1 <- y11-m1*x11
      if(m1 != m2){
        x_intersect <- -(b2-b1)/(m2-m1)
        bool1 <- (x11 < x_intersect & x_intersect < x12) | (x12 < x_intersect & x_intersect < x11)
        bool2 <- (x21 < x_intersect & x_intersect < x22) | (x22 < x_intersect & x_intersect < x21)
        if(bool1 & bool2){ # condition for finding crossing
          replace_crossing <- rev(paths[i,(k+1):num_iter])
          paths[i,(k+1):num_iter] <- replace_crossing
          dist1_replace <- cities_dist_original[city11,city21]
          dist2_replace <- cities_dist_original[city12,city22]
          costs[i,k:num_iter] = c(dist1_replace, rev(costs[i,(k+1):(num_iter-1)]), dist2_replace)
          city_current <- paths[i, num_iter]
          city21=city_current
          x21=cities_pos[city21,1]
          y21=cities_pos[city21,2]
        } # end of if crossing exist
      } # end of if slopes are different
    } # end of for possible crossing
  }
} #end of if iter > 2

# Se hace el costo de cerrar el ciclo.
if(m == n-1){
  costs[1:n, n]  <- sapply(1:n, function(i){cities_dist_original[paths[i, n], i]})
}


# Se calcula el costo de cada ciclo
costs_cycles <- sapply(1:n, function(i){sum(costs[i,])})
# Es el indice del mejor ciclo
cycle_index <- which.min(costs_cycles)
# Se guarda el mejor ciclo y su costo
path_min_noswap <- paths[cycle_index,]
cost_min_noswap <- costs_cycles[cycle_index]
```

```{r}
# Matriz que a cada fila corresponde un ciclo. Cada celda guarda que numero de visita es cada ciudad. Si en [1,2] = 13, entonces la 13ava ciudad visitada
# en el ciclo 1 es la ciudad 2. 
index_matrix <- matrix(0L, nrow = n, ncol = n)
# Se generan los caminos extendidos para poder considerar en una sola matriz todos los caminos posibles leidos como secuencia
paths_ext <- matrix(0L, nrow = n, ncol = 2*n)
# Lo análogo con la funcion de costos
costs_ext <- matrix(0L, nrow = n, ncol = 2*n)
# Se generan estas estructuras
for(i in 1:n){
  index_matrix[i,] <- sapply(1:n, function(j) index_function(i,j))
  paths_ext[i,] <-  c(paths[i,], paths[i,2:n])
  costs_ext[i,] <-  c(costs[i,], costs[i,])
}
```


```{r}
success <- 1 # Indica que se encontró alguna estructura que swapear, se define 1 para que entre al while al menos una vez
while(success>0){
  success <- 0  # no se han encontrado estructuras swapeables
  path_list <- list() # se guardan las estructuras swapeables
  path_index_list <- list()  # se guarda donde inicia la estrucutra
  path_cost_vector <- c() # se guarda el costo total de cada estructura
  for(len in 3:(n-1)){  # se fija una longitud
    ini <- 1            # comenzando en el primer nodo
    end <- len+1        # hasta el nodo len + 1 se hace lo siguiente 
    for(j in 1:n){   # para cada longitud existen siempre n paths posibles por revisar en el ciclo inicial
      path <- paths_ext[cycle_index, ini:end] # se guarda la secuencia de ciudades
      path_cost <- sum(costs_ext[cycle_index, ini:(end-1)]) # el costo de las transiciones
      path_len <- len + 1 # la longitud del vector que esta dada por len + 1
      extreme1 <- path[1] # se guardan los extremos, la cabeza
      extreme2 <- tail(path, 1) # y la cola
      current_set <- setdiff(1:n, cycle_index)
      for(k in current_set){# vamos a buscar esta estructura en cada uno de los n-1 caminos generados
        index_begin <- index_matrix[k, extreme1] # obtenemos el indice donde se visita al extremo 1
        index_end <- index_matrix[k, extreme2] # y el indice donde se visita al extremo 2
        if(index_begin > index_end){ # si los indices estan al reves se intercambian
          index_aux <- index_begin
          index_begin <- index_end
          index_end <- index_aux
        }
        path1 <- paths_ext[k, index_begin:index_end] # se busca usando los extremos esa estructura en el ciclo k
        path1_len <- length(path1) # se toma su longitud
        path2 <- paths_ext[k, index_end:(index_begin+n)] # se considera el camino complemento del primero
        path2_len <- length(path2) # se toma su longitud
        if(path_len==path1_len && length(setdiff(path, path1))==0){ # si tienen longitudes iguales y tienen las mismas ciudades
          path1_cost <- sum(costs_ext[k, index_begin:(index_end-1)]) # considera el costo
          if(path1_cost < path_cost){ # entonces si es mas barato es posible hacer un swap
            if(length(path_list)>0){
              #not_in_list <- !any(sapply(1:success, function(i) length(path_list[[i]])==path1_len && all(path_list[[i]]==path1)))
              not_in_list <- !any(sapply(1:success, function(i) length(setdiff(path_list[[i]], path1))==0 || length(setdiff(path1, path_list[[i]])) == 0))
            }
            else{
              not_in_list <- TRUE
            }
            if(not_in_list){
              success <- success + 1 # se incrementa success
              path_list[[success]] <- path1 # se agrega a la lista
              path_cost_vector[success] <- path1_cost - path_cost # agrega la utilidad 
              path_index_list[[success]] <- c(k, index_begin, index_end) # informacion de donde empieza y donde acaba
            }
          }
        }
        if(path_len==path2_len && length(setdiff(path, path2))==0){ # se hace lo análogo con el camino complemento
          path2_cost <- sum(costs_ext[k,index_end:(index_begin+n-1)])
          if(path2_cost < path_cost){
            if(length(path_list)>0){
              #not_in_list <- !any(sapply(1:success, function(i) length(path_list[[i]])==path2_len && all(path_list[[i]]==path2)))
              not_in_list <- !any(sapply(1:success, function(i) length(setdiff(path_list[[i]], path2))==0 || length(setdiff(path2, path_list[[i]])) == 0))
            }
            else{
              not_in_list <- TRUE
            }
            if(not_in_list){
              success <- success + 1
              path_list[[success]] <- path2
              path_cost_vector[success] <- path2_cost - path_cost
              path_index_list[[success]] <- c(k, index_end, index_begin+n)
            }
          }
        }
      }
      # se incrementan el incio y fin y se revisan asi los n posibles caminos
      ini <- ini + 1
      end <- end + 1
    }
  }
  if(success>0){
    m <- 0
    path_cost_vector_aux <- path_cost_vector
    path_index_vector_refined <- c()
    path_list_refined <- list()
    for(k in 1:success){
      index <- which.min(path_cost_vector_aux)
      path_cand <- path_list[[index]]
      if( m>0 ){
        k <- sum(sapply(1:m, function(i) length(intersect(path_list_refined[[m]], path_cand)))) # paths ajenos
        if(k==0){
          m <-  m+1
          path_list_refined[[m]] <- path_cand
          path_index_vector_refined[m] <- index
        }
      }
      else{
        m <- m+1 
        path_list_refined[[m]] <- path_cand
        path_index_vector_refined[m] <- index
      }
        path_cost_vector_aux <-  path_cost_vector_aux[-index]
    }
    for(k in 1:m){
      index_min <- path_index_vector_refined[k] # el numero de success que sera reemplazado
      index_replace <- path_index_list[[index_min]][1] # corresponde al ciclo numero k
      index_begin <- path_index_list[[index_min]][2] # que comienza en la ciudad index_begin
      index_end <- path_index_list[[index_min]][3] # termina en la ciudad index_end
      path_replace <- path_list[[index_min]] # la estructura a remplazarse
      costs_replace <- costs_ext[index_replace, index_begin:(index_end-1)]
      index_head <- index_matrix[cycle_index, path_replace[1]] # los indices head y tail del ciclo inicial
      index_tail <- index_matrix[cycle_index, tail(path_replace, 1)] # que va a reemplazarse
      if(length(index_head:index_tail) == length(path_replace)){
        # En este caso se puede sustituir la estructura en el camino sin necesidad de cortarlo
        # Puede ser que haya que ponerlo tal y como esta o en reversa
        if(index_head > index_tail){
          path_replace <- rev(path_replace) 
          costs_replace <- rev(costs_replace)
          aux <- index_head
          index_head <- index_tail
          index_tail <- aux  
        }
        paths[cycle_index, index_head:index_tail] <- path_replace
        costs[cycle_index, index_head:(index_tail-1)] <- costs_replace
      }
      else{ # En este caso es necesario cortar el camino en partes para el reemplazo
        if(index_head < index_tail){ #nuevamente,pero si head es menor que tail
          path_replace <- rev(path_replace)
          costs_replace <- rev(costs_replace)
          aux <- index_head
          index_head <- index_tail
          index_tail <- aux  
        }
        index_cut <- which(path_replace == cycle_index) #encuentra donde hay que hacer el corte de la estructura
        path_head <- path_replace[1:index_cut] # se parte en dos, head
        path_tail <- path_replace[-1:-(index_cut-1)] # y tail
        costs_head <- costs_replace[1:(index_cut-1)]
        costs_tail <- costs_replace[-1:-(index_cut-1)]
        index_begin <- index_tail + 1 # El primer indice que no es de la estructura
        index_end <- index_head-1 # El ultimo indice que no es de la estructura
        paths[cycle_index,] <- c(path_tail, paths[cycle_index, index_begin:index_end], path_head) # se reemplaza el camino
        costs[cycle_index,] <- c(costs_tail, costs[cycle_index, (index_begin-1):index_end], costs_head) # y el costo
      }
      for(i in 1:n){ # se actualiza la matriz de indices, de caminos extendidos y de costos
        index_matrix[i,] <- sapply(1:n, function(j) index_function(i,j))
        paths_ext[i,] <-  c(paths[i,], paths[i,2:n])
        costs_ext[i,] <-  c(costs[i,], costs[i,])
      }
    }
  }
}
```

```{r}
path_min_swap <- paths[cycle_index,]
cost_min_swap <- sum(costs[cycle_index,])
end_time <- Sys.time()
```

```{r}
algorith_time <- end_time - start_time
```

```{r}
cities_pos_df <- as.data.frame(cities_pos)
g1 <- TSP_plot(cities_pos_df, path_min_noswap, path_min_noswap) +  ggtitle("Greedy")  + labs (x = cost_min_noswap, y = "")
g2 <- TSP_plot(cities_pos_df, path_min_swap, path_min_noswap) +  ggtitle("Swapping")  + labs (x = cost_min_swap, y = "")
grid.arrange (g1, g2, nrow=1)
```